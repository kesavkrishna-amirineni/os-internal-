Exercise 2:Write a C program that makes a copy of a file using standard I/O, and system calls.
program::
By using System calls:
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    char buf[20];
    int fd1, fd2, n;
    
    if (argc < 3) {
        printf("Usage: %s <source_file> <destination_file>\n", argv[0]);
        return 1; // Return error code if arguments are insufficient
    }
    
    fd1 = open(argv[1], O_RDONLY);
    if (fd1 == -1) {
        perror("Error opening source file");
        return 1; // Return error code if source file cannot be opened
    }
    
    fd2 = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, 0644); // Create or truncate destination file
    if (fd2 == -1) {
        perror("Error opening destination file");
        close(fd1); // Close source file before returning
        return 1; // Return error code if destination file cannot be opened
    }
    
    while ((n = read(fd1, buf, sizeof(buf))) > 0) {
        if (write(fd2, buf, n) != n) {
            perror("Error writing to destination file");
            close(fd1);
            close(fd2);
            return 1; // Return error code if write operation fails
        }
    }
    
    if (n == -1) {
        perror("Error reading from source file");
        close(fd1);
        close(fd2);
        return 1; // Return error code if read operation fails
    }
    
    close(fd1);
    close(fd2);
    
    return 0; // Return success code
}

OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out student class
[dmgv@LinuxServer ~]$ cat student
hai
[dmgv@LinuxServer ~]$ cat class
hai
By using Standard I/O functions:
#include <stdio.h>

int main(int argc, char *argv[]) {
    FILE *fp1, *fp2;
    int ch;
    
    // Check if the correct number of command-line arguments are provided
    if (argc != 3) {
        printf("Usage: %s <source_file> <destination_file>\n", argv[0]);
        return 1;
    }
    
    // Open source file in read mode
    fp1 = fopen(argv[1], "r");
    if (fp1 == NULL) {
        perror("Error opening source file");
        return 1;
    }
    
    // Open destination file in write mode
    fp2 = fopen(argv[2], "w");
    if (fp2 == NULL) {
        perror("Error opening destination file");
        fclose(fp1); // Close source file before returning
        return 1;
    }
    
    // Copy contents from source file to destination file
    while ((ch = fgetc(fp1)) != EOF) {
        if (fputc(ch, fp2) == EOF) {
            perror("Error writing to destination file");
            fclose(fp1);
            fclose(fp2);
            return 1;
        }
    }
    
    // Close files
    fclose(fp1);
    fclose(fp2);
    
    return 0;
}
OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out student class
[dmgv@LinuxServer ~]$ cat student
hai
[dmgv@LinuxServer ~]$ cat class
hai




Exercise 3:Write a C program to emulate the UNIX ls –l command.

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    int pid; // Process id
    pid = fork(); // Create another process
    
    if (pid < 0) { // Fork failed
        perror("\nFork failed\n");
        exit(-1);
    } else if (pid == 0) { // Child
        execlp("/bin/ls", "ls", "-l", NULL); // Execute ls
        perror("\nexeclp failed\n"); // Print error if execlp fails
        exit(1); // Terminate child process
    } else { // Parent
        wait(NULL); // Wait for child
        printf("\nChild complete\n");
    }
    return 0;
}

OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
total 100
-rwxrwx—x 1 guest-glcbls guest-glcbls 140 2012-07-06 14:55 f1
drwxrwxr-x 4 guest-glcbls guest-glcbls 140 2012-07-06 14:40 dir1
child complete
11





Exercise 4:Write a C program that illustrates how to execute two commands concurrently with a command pipe. Ex: - ls –l | sort

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
#include <string.h> // Added for strlen() function
#include <sys/wait.h> // Added for waitpid() function

int main() {
    int pfds[2];
    char buf[80]; // Changed buffer size from 30 to 80 to match the read size
    if (pipe(pfds) == -1) {
        perror("pipe failed");
        exit(1);
    }
    if (!fork()) {
        close(1);
        dup(pfds[1]);
        close(pfds[0]); // Close unused read end of the pipe
        close(pfds[1]); // Close the duplicated write end of the pipe
        execl("/bin/ls", "ls", "-l", NULL); // Used execl() to execute 'ls -l' command
    } else {
        printf("Parent reading from pipe\n");
        close(pfds[1]); // Close write end of the pipe in the parent process
        while (read(pfds[0], buf, sizeof(buf)) > 0) // Read from the pipe until EOF
            printf("%s\n", buf);
        close(pfds[0]); // Close read end of the pipe after reading
        waitpid(-1, NULL, 0); // Wait for the child process to finish
    }
    return 0;
}






OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
Parent reading from pipe
Total 24
-rwxrwxr-x l student student 5563Aug 3 10:39 a.out
-rw-rw-r—l
Student student 340 jul 27 10:45 pipe2.c
-rw-rw-r—l student student
Pipes2.c
-rw-rw-r—l student student 401 34127 10:27 pipe2.c
student
14





Exercise 5:a) Simulate the following CPU scheduling algorithms:
b) Round Robin (b) SJF (c) FCFS (d) Priority

(c) FCFS:
#include<stdio.h>

int main()
{
int bt[20],wt[20],tat[20],i,n;
float wtavg,tatavg;

printf("Enter bumber of process--");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("\n Enter burst time for process %d--",i);
scanf("%d",&bt[i]);
}
wt[0]=wtavg=0;
tat[0]=tatavg=bt[0];
for(i=1;i<n;i++)
{
wt[i]=wt[i-1]+bt[i-1];
tat[i]=tat[i-1]+bt[i];
wtavg=wtavg+wt[i];
tatavg=tatavg+tat[i];
}
printf("\t Process \t burst time \t turnaround time \n");
for(i=0;i<n;i++)
printf("\n P %d \t\t%d\t\t%d",i,bt[i],wt[i],tat[i]);
printf("\n Average waiting time-- %f",wtavg/n);
printf("\n average turn around time --%f",tatavg/n);

}


OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
Enter the number of processes --
Enter Burst Time for Process 0 -- 24
Enter Burst Time for Process 1 --
Enter Burst Time for Process 2 --
PROCESS BURST TIME WAITING TIME
P0 24
TIME
24
P1 3 24 27
P2 3 27 30
Average Waiting Time-- 17.000000
Average Turnaround Time -- 27.000000

(b) SJF::
#include<stdio.h>
int main()
{
int p[20], bt[20], wt[20], tat[20], i, k, n, temp;
float wtavg, tatavg;
printf("\nEnter the number of processes --");
scanf("%d",&n);
for(i=0;i<n;i++)
{
p[i]=i;
printf("Enter Burst Time for Process %d -- ", i);
 scanf("%d",&bt[i]);
}
for(i=0;i<n;i++)
for(k=i+1;k<n;k++)
if(bt[i]<bt[k])
{
temp=bt[i];
bt[i]=bt[k];
bt[k]=temp;
temp=p[i];
p[i]=p[k];
p[k]=temp;
}
wt[0] = wtavg = 0;
tat[0] = tatavg = bt[0];
for(i=1;i<n;i++)
{

wt[i] = wt[i-1] +bt[i-1];
tat[i] = tat[i-1] +bt[i];
wtavg = wtavg + wt[i];
tatavg = tatavg + tat[i];
}
printf("\n\t PROCESS \tBURST TIME \t WAITING TIME\t TURNAROUND TIME\n");
for(i=0;i<n;i++)
printf("\n\t P%d \t\t %d \t\t %d \t\t %d", p[i], bt[i], wt[i], tat[i]);
printf("\nAverage Waiting Time -- %f", wtavg/n);
printf("\nAverage Turnaround Time -- %f", tatavg/n);
}

OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
Enter the number of processes --
Enter Burst Time for Process 0 --
Enter Burst Time for Process 1 --
Enter Burst Time for Process 2 --
Enter Burst Time for Process 3 --
PROCESS BURST WAITING TURNARO
TIME TIME UND TIME
P3
P0
P2 16
P1 16 24
Average Waiting Time -- 7.000000
Average Turnaround Time -- 13.000000
18

(d)priority::
#include<stdio.h>
int main()
{
int p[20],bt[20],pri[20], wt[20],tat[20],i, k, n, temp;
float wtavg, tatavg;
printf("Enter the number of processes ---");
scanf("%d",&n);
for(i=0;i<n;i++)
{
p[i] = i;
printf("Enter the Burst Time  Priority of Process %d ---",i);
scanf("%d%d",&bt[i],&pri[i]);
}
for(i=0;i<n;i++)
for(k=i+1;k<n;k++)
if(pri[i]< pri[k])
{

temp=p[i]; //process swapping
p[i]=p[k];
p[k]=temp;
temp=bt[i]; // burst time swapping
bt[i]=bt[k];
bt[k]=temp;
temp=pri[i]; // priority swapping
pri[i]=pri[k];
pri[k]=temp;
}
wtavg = wt[0] = 0;
tatavg = tat[0] = bt[0];
for(i=1;i<n;i++)
{
wt[i] = wt[i-1] + bt[i-1];
tat[i] = tat[i-1] + bt[i];
wtavg = wtavg + wt[i];
tatavg = tatavg + tat[i];
}
printf("\nPROCESS\t\tPRIORITY\tBURST TIME\tWAITING TIME\tTURNAROUND TIME");
for(i=0;i<n;i++)
printf("\n%d \t\t %d \t\t %d \t\t %d \t\t %d ",p[i],pri[i],bt[i],wt[i],tat[i]);
printf("\nAverage Waiting Time is --- %f",wtavg/n);
printf("\nAverage Turnaround Time is --- %f",tatavg/n);
}

OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
20
Enter the number of processes -- 5
Enter the Burst Time & Priority of Process 0 --- 10
Enter the Burst Time & Priority of Process 1 --- 1
Enter the Burst Time & Priority of Process 2 --- 2
Enter the Burst Time & Priority of Process 3 --- 1
Enter the Burst Time & Priority of Process 4 --- 5
PROCESS PRIORITY BURST TIME
1 1 1
WAITIN
G TIME
0
UND TIME
1
4 2 5
0 3 10 16
2 4 2 16 18
3 5 1 18 19
Average Waiting Time is --- 8.200000
Average Turnaround Time is 12.000000

(b)Round Robin::
#include <stdio.h>

int main() {
    int i, j, n, bu[10], wa[10], tat[10], t, ct[10], max;
    float awt = 0, att = 0, temp = 0;

    printf("Enter the no of processes -- ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nEnter Burst Time for process %d -- ", i + 1);
        scanf("%d", &bu[i]);
        ct[i] = bu[i];
    }

    printf("\nEnter the size of time slice -- ");
    scanf("%d", &t);

    max = bu[0];
    for (i = 1; i < n; i++)
        if (max < bu[i])
            max = bu[i];

    for (j = 0; j < (max / t) + 1; j++)
        for (i = 0; i < n; i++)
            if (bu[i] != 0)
                if (bu[i] <= t) {
                    tat[i] = temp + bu[i];
                    temp = temp + bu[i];
                    bu[i] = 0;
                } else {
                    bu[i] = bu[i] - t;
                    temp = temp + t;
                }

    for (i = 0; i < n; i++) {
        wa[i] = tat[i] - ct[i];
        att += tat[i];
        awt += wa[i];
    }

    printf("\nThe Average Turnaround time is -- %f", att / n);
    printf("\nThe Average Waiting time is -- %f ", awt / n);
    printf("\n\tPROCESS\t BURST TIME \t WAITING TIME\tTURNAROUND TIME\n");
    for (i = 0; i < n; i++)
        printf("\t%d \t %d \t\t %d \t\t %d \n", i + 1, ct[i], wa[i], tat[i]);

    return 0;
}


OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
Enter the no of processes – 3
Enter Burst Time for process 1 – 24
Enter Burst Time for process 2 -- 3
Enter Burst Time for process 3 – 3
Enter the size of time slice – 3
OUTPUT:
PROCESS BURST TIME WAITING TIME TURNAROUNDTIME
1 24 6 30
2 3 4 7
3 3 7 10
The Average Turnaround time is – 15.666667
The Average Waiting time is 5.666667
23



Exercise 6: Multiprogramming-Memory management-Implementation of fork (), wait (),exec() and exit (), System calls

fork() System call:
#include<stdio.h>
#include<unistd.h>
int main(void)
{
int pid;
pid=fork();
if(pid>=0)
{
if(pid==0)
{
printf("\n Child process id :%d"
,pid);
}
else
{
printf("\n Parent process id :%d"
,pid);
}
}
else
printf("\n Process is not created");
}
OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
Parent process id :6848


wait() System call::
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdlib.h>

int main() {
    int pid, status, childpid;
    printf("Parent process with PID is %d\n", getpid());

    pid = fork();

    if (pid != 0) {
        sleep(1);
        printf("Parent process with PID %d and PPID %d\n", getpid(), getppid());
        childpid = wait(&status);
        printf("Child process PID %d terminated with exit code %d\n", childpid, status >> 8);
    } else {
        printf("Child process with PID %d and PPID %d\n", getpid(), getppid());
        sleep(5);
        exit(42);
    }

    printf("PID %d terminates\n", getpid());

    return 0;
}

Output:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out
parent process with PID is 7242
child process with PID 7243 and PPId 7242
parent process with PID 7242 and PPID 6984
child process PID 7243 terminated with exit code 42
PID 7242 terminates

exec() System call:
#include<stdio.h>
#include<unistd.h>
int main( int argc,char *argv[])
{
if(fork()==0)
{
execvp(argv[1],&argv[1]);
fprintf(stderr,
"couldnot execute %s \n"
,argv[1]);
}
}
OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out samplefilename.txt
Hello welcome to OS lab we are executing execvp() system call
execl() System call::
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    printf("I am process %d and I am about to execute 'ls -1'\n", getpid());
    execl("/bin/ls", "ls", "-1", NULL);
    perror("execl() failed");
    printf("This line should never be executed\n");
    return 0;
}

OUTPUT:
[dmgv@LinuxServer ~]$ cc filename.c
[dmgv@LinuxServer ~]$ ./a.out ls
i am process 7189 and iam about exec an ls -1
a.out
armstrong.sh
banker.c
class
d1
d2


Exercise 7:Simulate the following:
a) Multiprogramming with a fixed number of tasks (MFT) b) Multiprogramming with a variable number of tasks (MVT)

MFT::
#include<stdio.h>


int main() {
    int ms, bs, nob, ef, n, mp[10], tif = 0;
    int i, p = 0;



    printf("Enter the total memory available (in Bytes) -- ");
    scanf("%d", &ms);

    printf("Enter the block size (in Bytes) -- ");
    scanf("%d", &bs);

    nob = ms / bs;
    ef = ms - nob * bs;

    printf("\nEnter the number of processes -- ");
    scanf("%d", &n);

    for(i = 0; i < n; i++) {
        printf("Enter memory required for process %d (in Bytes) -- ", i + 1);
        scanf("%d", &mp[i]);
    }

    printf("\nNo. of Blocks available in memory -- %d\n", nob);

    printf("\nPROCESS\tMEMORY REQUIRED\tALLOCATED\tINTERNAL FRAGMENTATION\n");

    for(i = 0; i < n && p < nob; i++) {
        printf(" %d\t\t%d", i + 1, mp[i]);

        if(mp[i] > bs) {
            printf("\t\tNO\t\t---\n");
        } else {
            printf("\t\tYES\t%d\n", bs - mp[i]);
            tif += bs - mp[i];
            p++;
        }
    }

    if(i < n)
        printf("\nMemory is Full, Remaining Processes cannot be accommodated\n");

    printf("\nTotal Internal Fragmentation is %d\n", tif);
    printf("Total External Fragmentation is %d\n", ef);


    return 0;
}
OUTPUT::
Enter the total memory available (in Bytes) -- 2000
Enter the block size (in Bytes) -- 200

Enter the number of processes -- 3
Enter memory required for process 1 (in Bytes) -- 100
Enter memory required for process 2 (in Bytes) -- 300
Enter memory required for process 3 (in Bytes) -- 400

No. of Blocks available in memory -- 10

PROCESS MEMORY REQUIRED ALLOCATED       INTERNAL FRAGMENTATION
 1              100             YES     100
 2              300             NO              ---
 3              400             NO              ---

Total Internal Fragmentation is 100
Total External Fragmentation is 0

MVT::
#include<stdio.h>


int main() {
    int ms, mp[10], i, temp, n = 0;
    char ch = 'y';

    printf("\nEnter the total memory available (in Bytes): ");
    scanf("%d", &ms);
    temp = ms;

    for (i = 0; ch == 'y'; i++, n++) {
        printf("\nEnter memory required for process %d (in Bytes): ", i + 1);
        scanf("%d", &mp[i]);

        if (mp[i] <= temp) {
            printf("\nMemory is allocated for Process %d", i + 1);
            temp -= mp[i];
        } else {
            printf("\nMemory is Full");
            break;
        }

        printf("\nDo you want to continue (y/n): ");
        scanf(" %c", &ch);
    }

    printf("\n\nTotal Memory Available: %d", ms);
    printf("\n\n\tPROCESS\t\t MEMORY ALLOCATED ");

    for (i = 0; i < n; i++)
        printf("\n\t%d\t\t%d", i + 1, mp[i]);

    printf("\n\nTotal Memory Allocated is %d", ms - temp);
    printf("\nTotal External Fragmentation is %d", temp);


    return 0;
}

OUTPUT:
Enter the total memory available (in Bytes): 2000

Enter memory required for process 1 (in Bytes): 200

Memory is allocated for Process 1
Do you want to continue (y/n): n


Total Memory Available: 2000

        PROCESS          MEMORY ALLOCATED
        1               200

Total Memory Allocated is 200
Total External Fragmentation is 1800


Exercise 8:Simulate Bankers Algorithm for Dead Lock Avoidance
#include<stdio.h>
#include<string.h>
void main() {
    int alloc[10][10], max[10][10];
    int avail[10], work[10], total[10];
    int i, j, k, n, need[10][10];
    int m;
    int count = 0, c = 0;
    char finish[10];
    printf("Enter the no. of processes and resources: ");
    scanf("%d%d", &n, &m);
    
    for (i = 0; i <= n; i++)
        finish[i] = 'n';
    
    printf("Enter the claim matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
    
    printf("Enter the allocation matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);
    
    printf("Resource vector:");
    for (i = 0; i < m; i++)
        scanf("%d", &total[i]);
    
    for (i = 0; i < m; i++)
        avail[i] = 0;
    
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            avail[j] += alloc[i][j];
    
    for (i = 0; i < m; i++)
        work[i] = avail[i];
    
    for (j = 0; j < m; j++)
        work[j] = total[j] - work[j];
    
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    
A:
    for (i = 0; i < n; i++) {
        c = 0;
        for (j = 0; j < m; j++)
            if ((need[i][j] <= work[j]) && (finish[i] == 'n'))
                c++;
        
        if (c == m) {
            printf("All the resources can be allocated to Process %d\n", i + 1);
            printf("\nAvailable resources are:");
            
            for (k = 0; k < m; k++) {
                work[k] += alloc[i][k];
                printf("%4d", work[k]);
            }
            
            printf("\n");
            finish[i] = 'y';
            printf("\nProcess %d executed?: %c \n", i + 1, finish[i]);
            count++;
        }
    }
    
    if (count != n)
        goto A;
    else
        printf("\nSystem is in safe mode\n");
    
    printf("\nThe given state is a safe state\n");
    
}

OUTPUT:
Enter the no. of processes and resources: 4 3 Enter the claim matrix:
3 2 2
6 1 3
3 1 4
4 2 2
Enter the allocation matrix:
1 0 0
6 1 2
2 1 1
0 0 2
Resource vector:9 3 6
All the resources can be allocated to Process 2 Available resources are: 6 2 3
Process 2 executed?:y
All the resources can be allocated to Process 3 Available resources are: 8 3 4
Process 3 executed?:y
All the resources can be allocated to Process 4 Available resources are: 8 3 6
35
Process 4 executed?:y
All the resources can be allocated to Process 1 Available resources are: 9 3 6
Process 1 executed?:y
System is in safe mode
The given state is safe state



Exercise 9:Simulate Bankers Algorithm for Dead Lock Prevention.
#include<stdio.h>

int max[100][100];
int alloc[100][100];
int need[100][100];
int avail[100];
int n,r;

void input();
void show();
void cal();

int main() {
    printf("********** Deadlock Detection Algorithm ************\n");
    input();
    show();
    cal();

    return 0;
}

void input() {
    int i,j;
    printf("Enter the number of Processes: ");
    scanf("%d", &n);
    printf("Enter the number of resource instances: ");
    scanf("%d", &r);
    printf("Enter the Max Matrix:\n");
    for(i=0; i<n; i++) {
        for(j=0; j<r; j++) {
            scanf("%d", &max[i][j]);
        }
    }
    printf("Enter the Allocation Matrix:\n");
    for(i=0; i<n; i++) {
        for(j=0; j<r; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }
    printf("Enter the available Resources:\n");
    for(j=0; j<r; j++) {
        scanf("%d", &avail[j]);
    }
}

void show() {
    int i,j;
    printf("Process\t Allocation\t Max\t Available\n");
    for(i=0; i<n; i++) {
        printf("P%d\t", i+1);
        for(j=0; j<r; j++) {
            printf("%d ", alloc[i][j]);
        }
        printf("\t");
        for(j=0; j<r; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\t");
        if(i==0) {
            for(j=0; j<r; j++)
                printf("%d ", avail[j]);
        }
        printf("\n");
    }
}

void cal() {
    int finish[100],flag=1,k,c1=0;
    int dead[100];
    int i,j;

    for(i=0; i<n; i++) {
        finish[i]=0;
    }

    // Find need matrix
    for(i=0; i<n; i++) {
        for(j=0; j<r; j++) {
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
 while(flag) {
        flag=0;
        for(i=0; i<n; i++) {
            int c=0;
            for(j=0; j<r; j++) {
                if((finish[i]==0)&&(need[i][j]<=avail[j])) {
                    c++;
                    if(c==r) {
                        for(k=0; k<r; k++) {
                            avail[k]+=alloc[i][j];
                            finish[i]=1;
                            flag=1;
                        }
                        printf("\nP%d", i);
                        if(finish[i]==1) {
                            i=n;
                        }
                    }
                }
            }
        }
    }

    j=0;
    flag=0;
    for(i=0; i<n; i++) {
        if(finish[i]==0) {
            dead[j]=i;
            j++;
            flag=1;
        }
    }

    if(flag==1) {
        printf("\n\nSystem is in Deadlock and the Deadlock processes are:\n");
        for(i=0; i<j; i++) {
            printf("P%d\t", dead[i]);
        }
        printf("\n");
    } else {
        printf("\nNo Deadlock Occurs\n");
    }
}




OUTPUT::
********** Deadlock Detection Algorithm ************
Enter the number of Processes: 4
Enter the number of resource instances: 3
Enter the Max Matrix:
1
2
3
4
8
34
45
23
56
78
23
4
Enter the Allocation Matrix:
7
6
3
6
4
7
45
78
34
67
34
67
Enter the available Resources:
34
78
34
Process  Allocation      Max     Available
P1      7 6 3   1 2 3   34 78 34
P2      6 4 7   4 8 34
P3      45 78 34        45 23 56
P4      67 34 67        78 23 4

P0
P1
P2
P3
No Deadlock Occurs



Exercise 10:Simulate the following page replacement algorithms: a) FIFO b) LRU c) LFU

FIFO:
#include<stdio.h>
int fr[3];
void main()
{
void display();
int i,j,page[12]={2,3,2,1,5,2,4,5,3,2,5,2};
int flag1=0,flag2=0,pf=0,frsize=3,top=0;


for(i=0;i<3;i++)
{
fr[i]=-1;
}
for(j=0;j<12;j++)
{
flag1=0; flag2=0;
for(i=0;i<3;i++)
{
if(fr[i]==page[j])
{
flag1=1;
flag2=1;
break;
}
}
if(flag1==0)
{
for(i=0;i<frsize;i++)
{
if(fr[i]==-1)
{
fr[i]=page[j];
flag2=1;
break;
}
}
}
if(flag2==0)
{
fr[top]=page[j];
top++;
pf++;
if(top>=frsize)
top=0;
}
display();
}
printf("Number of page faults : %d ",pf+frsize);
}
void display()
{
int i;
printf("\n"); for(i=0;i<3;i++)
printf("%d\t",fr[i]);
}
OUTPUT:
2       -1      -1
2       3       -1
2       3       -1
2       3       1
5       3       1
5       2       1
5       2       4
5       2       4
3       2       4
3       2       4
3       5       4
3       5       2       
Number of page faults : 9 


LRU::
#include<stdio.h>

int fr[3];
void main()
{
void display();
int p[12]={2,3,2,1,5,2,4,5,3,2,5,2},i,j,fs[3];
int index,k,l,flag1=0,flag2=0,pf=0,frsize=3;

for(i=0;i<3;i++)
{
fr[i]=-1;
}
for(j=0;j<12;j++)
{
flag1=0,flag2=0;
 for(i=0;i<3;i++)
{
if(fr[i]==p[j])
{
flag1=1;
 flag2=1;
 break;
}
}
if(flag1==0)
{
for(i=0;i<3;i++)
{
if(fr[i]==-1)
{
fr[i]=p[j];
 flag2=1;
 break;
}
}
}
if(flag2==0)
{
for(i=0;i<3;i++)
 fs[i]=0;
for(k=j-1,l=1;l<=frsize-1;l++,k--)
{
for(i=0;i<3;i++)
{
if(fr[i]==p[k])
 fs[i]=1;
}}
for(i=0;i<3;i++)
{
if(fs[i]==0) index=i;
}
fr[index]=p[j]; pf++;
}
display();
}
printf("\n no of page faults :%d",pf+frsize);
}
void display()
{
int i; printf("\n"); for(i=0;i<3;i++) printf("\t%d",fr[i]);
}
OUTPUT:
  2       -1      -1
        2       3       -1
        2       3       -1
        2       3       1
        2       5       1
        2       5       1
        2       5       4
        2       5       4
        3       5       4
        3       5       2
        3       5       2
        3       5       2
 no of page faults :7

LFU::
#include<stdio.h>
int main()
{
int f,p;
int pages[50],frame[10],hit=0,count[50],time[50];
int i,j,page,flag,least,minTime,temp;
printf("Enter no of frames : ");
scanf("%d",&f);
printf("Enter no of pages : ");
scanf("%d",&p);
for(i=0;i<f;i++)
{
frame[i]=-1;
}
for(i=0;i<50;i++)
{
count[i]=0;
}
printf("Enter page no : \n");
for(i=0;i<p;i++)
{
scanf("%d",&pages[i]);
}
printf("\n");
 for(i=0;i<p;i++)
{
count[pages[i]]++;
time[pages[i]]=i;
flag=1;
least=frame[0];
for(j=0;j<f;j++)
{
if(frame[j]==-1 || frame[j]==pages[i])
{
if(frame[j]!=-1)
{
hit++;
}
flag=0;
frame[j]=pages[i];
break;
}
if(count[least]>count[frame[j]])
{
least=frame[j];
}
}
if(flag)
{
minTime=50;
for(j=0;j<f;j++)
{
if(count[frame[j]]==count[least] && time[frame[j]]<minTime)
{
temp=j;
minTime=time[frame[j]];
}
}
count[frame[temp]]=0;
frame[temp]=pages[i];
}
for(j=0;j<f;j++)
{
printf("%d ",frame[j]);}
printf("\n");
}
printf("Page hit = %d",hit);
return 0;
}

OUTPUT:
Enter no of frames : 3
Enter no of pages : 6
Enter page no :
23
56
78
23
78
78

23 -1 -1
23 56 -1
23 56 78
23 56 78
23 56 78
23 56 78
Page hit = 3



Exercise 11:Simulate the following File allocation strategies (a) Sequenced (b) Indexed (c) Linked.

(a)sequenced::
#include<stdio.h>
#include<stdlib.h> // Include stdlib.h for exit() function

int main() // Specify return type for main function
{
    int f[50], i, st, j, len, c; // Added missing variable c
    for (i = 0; i < 50; i++)
        f[i] = 0;

X:
    printf("\n Enter the starting block & length of file: ");
    scanf("%d%d", &st, &len);

    for (j = st; j < (st + len); j++) {
        if (f[j] == 0) {
            f[j] = 1;
            printf("\n%d->%d", j, f[j]);
        } else {
            printf("\nBlock already allocated");
            break;
        }
    }

    if (j == (st + len))
        printf("\n The file is allocated to disk");

    printf("\n If you want to enter more files? (y-1/n-0): ");
    scanf("%d", &c);

    if (c == 1)
        goto X;
    else
        exit(0); // Return 0 for successful termination
}


OUTPUT:
 Enter the starting block & length of file:  4 10 4->1

4->1
5->1
6->1
7->1
8->1
9->1
10->1
11->1
12->1
13->1
 The file is allocated to disk


(b)INDEXED::
#include<stdio.h>
#include<stdlib.h> // Include stdlib.h for exit() function
 // Include conio.h for getch() function

int f[50], inde[50], i, k, j, n, c, count = 0, p;

int main() {
 // Assuming this is a function to clear the screen, might need to be adjusted for different environments
    for (i = 0; i < 50; i++)
        f[i] = 0;
x:
    printf("Enter index block: ");
    scanf("%d", &p);
    if (f[p] == 0) {
        f[p] = 1;
        printf("Enter number of files on index: ");
        scanf("%d", &n);
    } else {
        printf("Block already allocated\n");
        goto x;
    }
    for (i = 0; i < n; i++)
        scanf("%d", &inde[i]);
    for (i = 0; i < n; i++)
        if (f[inde[i]] == 1) {
            printf("Block already allocated");
            goto x;
        }
    for (j = 0; j < n; j++)
        f[inde[j]] = 1;
    printf("\nAllocated");
    printf("\nFile indexed");
    for (k = 0; k < n; k++)
        printf("\n%d->%d:%d", p, inde[k], f[inde[k]]);
    printf("\nEnter 1 to enter more files and 0 to exit: ");
    scanf("%d", &c);
    if (c == 1)
        goto x;
    else
        exit(0);
 // Assuming this is to wait for a character, might need to be adjusted for different environments
    return 0; // Return 0 for successful termination
}

OUTPUT:
Enter index block: 9
Enter number of files on index: 3 1 2 3

Allocated
File indexed
9->1:1
9->2:1
9->3:1
Enter 1 to enter more files and 0 to exit: 0


(c)LINKED::
#include<stdio.h>
#include<stdlib.h> // Include stdlib.h for exit() function
// Include conio.h for getch() function

int main() {
    int f[50], p, i, j, k, a, st, len, n, c;
 // Assuming this is a function to clear the screen, might need to be adjusted for different environments
    for (i = 0; i < 50; i++)
        f[i] = 0;
    printf("Enter how many blocks that are already allocated: ");
    scanf("%d", &p);
    printf("\nEnter the block numbers that are already allocated: ");
    for (i = 0; i < p; i++) {
        scanf("%d", &a);
        f[a] = 1;
    }
X:
    printf("Enter the starting index block & length: ");
    scanf("%d%d", &st, &len);
    k = len;
    for (j = st; j < (k + st); j++) {
        if (f[j] == 0) {
            f[j] = 1;
            printf("\n%d->%d", j, f[j]);
        } else {
            printf("\n%d->file is already allocated", j);
            k++;
        }
    }
    printf("\nIf you want to enter one more file? (yes-1/no-0): ");
    scanf("%d", &c);
    if (c == 1)
        goto X;
    else
        exit(0); // Return 0 for successful termination
 // Assuming this is to wait for a character, might need to be adjusted for different environments
   return 0; // Return 0 for successful termination
}


OUTPUT:
Enter how many blocks that are already allocated: 3

Enter the block numbers that are already allocated: 4 7
 78
Enter the starting index block & length: 3
7

3->1
4->file is already allocated
5->1
6->1
7->file is already allocated
8->1
9->1
10->1
11->1
If you want to enter one more file? (yes-1/no-0):




Exercise 12:Write a C program that illustrates two processes communicating using shared memory.

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/shm.h>
#include<string.h>

int main() {
    int i;
    void *shared_memory;
    char buff[100];
    int shmid;

    shmid = shmget((key_t)2345, 1024, 0666|IPC_CREAT);
    if (shmid == -1) {
        perror("shmget failed");
        exit(EXIT_FAILURE);
    }

    printf("Key of shared memory is %d\n", shmid);

    shared_memory = shmat(shmid,NULL,0);
    if (shared_memory == (void *)-1) {
        perror("shmat failed");
        exit(EXIT_FAILURE);
    }

    printf("Process attached at %p\n", shared_memory);

    printf("Enter some data to write to shared memory\n");
    fgets(buff, 100, stdin); // Use fgets instead of read to get input from user

    strncpy(shared_memory, buff, 100); // Use strncpy to ensure null-terminated string

    printf("You wrote : %s\n", (char *)shared_memory);

    // Detach from shared memory
    if (shmdt(shared_memory) == -1) {
        perror("shmdt failed");
        exit(EXIT_FAILURE);
    }

    return 0;
}

OUTPUT:
Key of shared memory is 0
Process attached at 0x7ff99ef16000
Enter some data to write to shared memory
hello charan
You wrote : hello charan
